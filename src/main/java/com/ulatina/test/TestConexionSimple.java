package com.ulatina.test;

import java.sql.*;

/**
 * Test simple de conexi√≥n a la base de datos - sin dependencias externas
 */
public class TestConexionSimple {

    // Configuraci√≥n de base de datos
    private static final String HOST = "db-mysql-nyc3-21466-do-user-24289380-0.d.db.ondigitalocean.com";
    private static final String PUERTO = "25060";
    private static final String DATABASE = "defaultdb";
    private static final String USUARIO = "doadmin";
    private static final String CLAVE = ""; // Credencial removida por seguridad

    public static void main(String[] args) {
        System.out.println("=== TEST DE CONEXI√ìN A BASE DE DATOS ===\n");

        TestConexionSimple test = new TestConexionSimple();
        test.probarConexion();

        System.out.println("\n=== FIN DEL TEST ===");
    }

    public void probarConexion() {
        Connection conn = null;

        try {
            // Construir URL de conexi√≥n
            String url = "jdbc:mysql://" + HOST + ":" + PUERTO + "/" + DATABASE +
                        "?useSSL=true&requireSSL=true&serverTimezone=UTC&allowPublicKeyRetrieval=true";

            System.out.println("üîÑ Intentando conectar a la base de datos...");
            System.out.println("   Host: " + HOST);
            System.out.println("   Puerto: " + PUERTO);
            System.out.println("   Base de datos: " + DATABASE);
            System.out.println("   Usuario: " + USUARIO);

            // Cargar driver MySQL
            Class.forName("com.mysql.cj.jdbc.Driver");
            System.out.println("‚úÖ Driver MySQL cargado correctamente");

            // Establecer conexi√≥n
            conn = DriverManager.getConnection(url, USUARIO, CLAVE);

            if (conn != null && !conn.isClosed()) {
                System.out.println("‚úÖ CONEXI√ìN ESTABLECIDA EXITOSAMENTE");

                // Obtener metadatos
                DatabaseMetaData metaData = conn.getMetaData();
                System.out.println("\nüìä INFORMACI√ìN DE LA BASE DE DATOS:");
                System.out.println("   - Producto: " + metaData.getDatabaseProductName());
                System.out.println("   - Versi√≥n: " + metaData.getDatabaseProductVersion());
                System.out.println("   - Driver: " + metaData.getDriverName());
                System.out.println("   - Versi√≥n driver: " + metaData.getDriverVersion());

                // Probar consulta b√°sica
                System.out.println("\nüîç PROBANDO CONSULTAS:");

                try (PreparedStatement ps = conn.prepareStatement("SELECT 1 as test, NOW() as servidor_tiempo, DATABASE() as bd_actual, USER() as usuario_actual")) {
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) {
                        System.out.println("   ‚úÖ Consulta b√°sica: OK");
                        System.out.println("      ‚Ä¢ Resultado prueba: " + rs.getInt("test"));
                        System.out.println("      ‚Ä¢ Tiempo servidor: " + rs.getTimestamp("servidor_tiempo"));
                        System.out.println("      ‚Ä¢ BD actual: " + rs.getString("bd_actual"));
                        System.out.println("      ‚Ä¢ Usuario actual: " + rs.getString("usuario_actual"));
                    }
                    rs.close();
                }

                // Verificar tablas existentes
                try (PreparedStatement ps = conn.prepareStatement("SELECT COUNT(*) as total_tablas FROM information_schema.tables WHERE table_schema = DATABASE()")) {
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) {
                        int totalTablas = rs.getInt("total_tablas");
                        System.out.println("   ‚úÖ Tablas en la BD: " + totalTablas);
                    }
                    rs.close();
                }

                // Probar transacciones
                System.out.println("\n‚ö° PROBANDO TRANSACCIONES:");
                conn.setAutoCommit(false);

                try (PreparedStatement ps = conn.prepareStatement("SELECT 'Transacci√≥n OK' as mensaje")) {
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) {
                        System.out.println("   ‚úÖ " + rs.getString("mensaje"));
                    }
                    rs.close();
                    conn.commit();
                    System.out.println("   ‚úÖ Commit exitoso");
                } catch (SQLException e) {
                    conn.rollback();
                    System.out.println("   ‚ùå Error en transacci√≥n, rollback ejecutado");
                    throw e;
                } finally {
                    conn.setAutoCommit(true);
                }

                // Validar conexi√≥n
                if (conn.isValid(5)) {
                    System.out.println("\n‚úÖ VALIDACI√ìN DE CONEXI√ìN: OK (timeout: 5 segundos)");
                } else {
                    System.out.println("\n‚ùå VALIDACI√ìN DE CONEXI√ìN: FALL√ì");
                }

                System.out.println("\nüéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE");

            } else {
                System.out.println("‚ùå Error: Conexi√≥n nula o cerrada");
            }

        } catch (ClassNotFoundException e) {
            System.out.println("‚ùå ERROR: Driver MySQL no encontrado");
            System.out.println("   Causa: " + e.getMessage());
            System.out.println("   üí° Soluci√≥n: Agregar mysql-connector-java al classpath");

        } catch (SQLException e) {
            System.out.println("‚ùå ERROR DE SQL: " + e.getMessage());
            System.out.println("   C√≥digo de error: " + e.getErrorCode());
            System.out.println("   Estado SQL: " + e.getSQLState());

            // Diagn√≥stico espec√≠fico
            if (e.getErrorCode() == 1045) {
                System.out.println("   üí° Diagn√≥stico: Credenciales incorrectas");
            } else if (e.getErrorCode() == 2003) {
                System.out.println("   üí° Diagn√≥stico: No se puede conectar al servidor (red/firewall)");
            } else if (e.getErrorCode() == 1049) {
                System.out.println("   üí° Diagn√≥stico: Base de datos no existe");
            } else {
                System.out.println("   üí° Diagn√≥stico: Error de conexi√≥n general");
            }

        } catch (Exception e) {
            System.out.println("‚ùå ERROR INESPERADO: " + e.getMessage());
            e.printStackTrace();

        } finally {
            if (conn != null) {
                try {
                    conn.close();
                    System.out.println("\nüîí Conexi√≥n cerrada correctamente");
                } catch (SQLException e) {
                    System.out.println("\n‚ö†Ô∏è  Error cerrando conexi√≥n: " + e.getMessage());
                }
            }
        }
    }
}
